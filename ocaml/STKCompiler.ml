# 1 "ocamllex/STKCompiler.mll"
 
  open Printf

  let nbarg = Array.length Sys.argv

  let src = Sys.argv.(1)
  let lexbuf = Lexing.from_channel (open_in src)

  let output_file =
    if nbarg >= 3 then
      Sys.argv.(2)
    else
      "a.asm"
  let output = open_out output_file


  type position = {
    lnum: int;
    line: string
  }

  exception Compilation_Error of position * string

  let first_position = {lnum = 1; line = ""}

  let next_line position = {
    lnum = position.lnum + 1;
    line = ""
  }

  let next_lexeme position =
    {position with line = position.line ^ (Lexing.lexeme lexbuf)}


  let fmt = sprintf
  (*let put = fprintf output*)

  let register_str num_reg =
    if num_reg < 0 || num_reg >= 16 then
      raise (Failure (fmt "Invalid register number: %d" num_reg))
    else
      "$r" ^ (string_of_int num_reg)


  (* 
    On a le contrôle complet des registres puisque STK n'en utilise pas.
    Pour éviter de s'emmêler, une petite liste des registres
    auxquels on assigne un rôle spécial. 
  *)
  (* Registre dans lequel on mettra l'adresse de là où on stocke 'stack_pointer' *)
  let spa = register_str 15

  (* Registre contenant la valeur de stack_pointer, autrement dit le sommet de la pile *)
  let sp = register_str 14

  (* Registre accumulateur *)
  let acc = register_str 13


  type pushable = 
    | Tag of string 
    | Int of string 
    | Reg of int

  (* Faudra peut-être modifier la signature *)
  let push pushable =
    let put_specific () =
      match pushable with
      | Tag s ->
        fprintf output "ADDRESS $r0 %s\n" s; 0
      | Int s ->
        fprintf output "CONST $r0 %s\n" s; 0
      | Reg x -> x
    in
    (*put "READ %s %s\n" sp spa;*)
    fprintf output "DECR %s 1\n" sp;
    let x = put_specific () in
    fprintf output "WRITE %s %s\n" sp (register_str x);
    fprintf output "WRITE %s %s\n" spa sp

  let pop dest =
    let rec pop_rec l =
      match l with
      | [] -> 
        fprintf output "WRITE %s %s\n" spa sp
      | x::s ->
        fprintf output "READ %s %s\n" (register_str x) sp;
        fprintf output "INCR %s 1\n" sp;
        pop_rec s
    in
    (*put "READ %s %s\n" sp spa;*)
    pop_rec dest

  let pop_n n =
    let rec make_list i acc =
      if i >= n then
        acc
      else
        make_list (i+1) (i::acc)
    in
    pop (make_list 0 [])

# 105 "ocamllex/STKCompiler.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\248\255\249\255\250\255\011\000\021\000\031\000\253\255\
    \254\255\001\000\002\000\003\000\165\000\248\255\249\255\250\255\
    \106\000\116\000\129\000\253\255\254\255\005\000\032\000\033\000\
    \025\001\248\255\249\255\250\255\139\000\244\000\100\001\253\255\
    \254\255\084\000\086\000\113\000\214\001\237\255\238\255\254\000\
    \039\001\072\002\007\000\243\000\016\001\017\000\006\000\130\000\
    \126\000\007\000\011\000\055\000\043\000\121\000\245\000\252\255\
    \253\255\117\000\076\000\104\000\087\000\107\000\255\255\196\000\
    \242\000\124\000\235\000\243\255\251\255\242\255\134\000\128\000\
    \250\255\152\000\175\000\170\000\249\255\032\001\187\000\248\255\
    \244\000\234\000\251\000\247\255\244\000\242\000\236\000\253\000\
    \003\001\020\001\245\255\023\001\023\001\017\001\020\001\244\255\
    \020\001\037\001\038\001\041\001\022\001\241\255\216\001\226\001\
    \250\255\251\255\252\255\253\255\100\001\251\000\011\001\250\000\
    \255\000\255\255\106\001\108\001\109\001\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\004\000\007\000\003\000\255\255\
    \255\255\007\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \004\000\007\000\003\000\255\255\255\255\007\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\004\000\007\000\003\000\255\255\
    \255\255\007\000\255\255\000\000\255\255\255\255\255\255\016\000\
    \018\000\015\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\255\255\
    \255\255\018\000\018\000\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\005\000\255\255\255\255\
    \255\255\255\255\255\255\001\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\010\000\010\000\010\000\013\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\022\000\022\000\022\000\
    \025\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \000\000\034\000\034\000\034\000\037\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\063\000\255\255\255\255\255\255\255\255\000\000\063\000\
    \063\000\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\104\000\
    \000\000\000\000\000\000\000\000\114\000\255\255\255\255\255\255\
    \255\255\000\000\114\000\114\000\117\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\003\000\011\000\011\000\011\000\000\000\023\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\023\000\023\000\000\000\005\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\007\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\069\000\100\000\099\000\084\000\080\000\035\000\006\000\
    \035\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\035\000\077\000\073\000\006\000\064\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\020\000\015\000\
    \059\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\020\000\098\000\092\000\
    \021\000\060\000\069\000\061\000\062\000\069\000\064\000\071\000\
    \097\000\070\000\017\000\091\000\072\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\019\000\
    \018\000\074\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\064\000\075\000\076\000\079\000\
    \002\000\255\255\255\255\255\255\018\000\255\255\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \255\255\255\255\032\000\027\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \069\000\032\000\065\000\068\000\033\000\081\000\082\000\067\000\
    \083\000\085\000\086\000\087\000\066\000\088\000\029\000\069\000\
    \089\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\031\000\255\255\069\000\255\255\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\078\000\090\000\096\000\069\000\093\000\094\000\095\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\115\000\110\000\
    \111\000\255\255\112\000\113\000\115\000\255\255\115\000\118\000\
    \030\000\000\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\030\000\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\056\000\
    \055\000\102\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\107\000\106\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\056\000\000\000\
    \102\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\107\000\040\000\058\000\108\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \109\000\000\000\101\000\000\000\000\000\000\000\000\000\047\000\
    \000\000\026\000\045\000\053\000\000\000\043\000\000\000\000\000\
    \049\000\000\000\044\000\048\000\054\000\042\000\052\000\000\000\
    \051\000\046\000\000\000\000\000\000\000\050\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\041\000\000\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\102\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \102\000\000\000\255\255\000\000\255\255\118\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\101\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
    \000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\009\000\010\000\011\000\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\022\000\023\000\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\042\000\045\000\046\000\049\000\050\000\033\000\000\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\035\000\051\000\052\000\006\000\057\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\012\000\012\000\
    \058\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\012\000\047\000\048\000\
    \012\000\059\000\053\000\060\000\061\000\065\000\063\000\070\000\
    \047\000\053\000\012\000\048\000\071\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \018\000\073\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\064\000\074\000\075\000\078\000\
    \000\000\009\000\010\000\011\000\012\000\021\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \022\000\023\000\024\000\024\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \043\000\024\000\054\000\066\000\024\000\080\000\081\000\066\000\
    \082\000\084\000\085\000\086\000\054\000\087\000\024\000\043\000\
    \088\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\033\000\044\000\034\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\077\000\089\000\091\000\044\000\092\000\093\000\094\000\
    \096\000\097\000\098\000\099\000\100\000\077\000\108\000\109\000\
    \110\000\035\000\111\000\112\000\114\000\057\000\115\000\116\000\
    \024\000\255\255\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\030\000\063\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\036\000\
    \036\000\102\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\103\000\103\000\255\255\255\255\255\255\
    \255\255\255\255\064\000\255\255\255\255\255\255\036\000\255\255\
    \102\000\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\103\000\036\000\036\000\103\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \103\000\255\255\102\000\255\255\255\255\255\255\255\255\036\000\
    \255\255\024\000\036\000\036\000\255\255\036\000\255\255\255\255\
    \036\000\255\255\036\000\036\000\036\000\036\000\036\000\255\255\
    \036\000\036\000\255\255\255\255\255\255\036\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\036\000\255\255\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\041\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\108\000\255\255\255\255\255\255\
    \041\000\255\255\114\000\255\255\115\000\116\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\036\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\103\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec dater_tag pos lexbuf =
   __ocaml_lex_dater_tag_rec pos lexbuf 0
and __ocaml_lex_dater_tag_rec pos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 113 "ocamllex/STKCompiler.mll"
                ( dater_tag (next_lexeme pos) lexbuf )
# 390 "ocamllex/STKCompiler.ml"

  | 1 ->
# 114 "ocamllex/STKCompiler.mll"
                ( dater_tag (next_lexeme pos) lexbuf )
# 395 "ocamllex/STKCompiler.ml"

  | 2 ->
# 115 "ocamllex/STKCompiler.mll"
                (
    error pos "Syntax error: unexpected ':'" lexbuf
  )
# 402 "ocamllex/STKCompiler.ml"

  | 3 ->
# 118 "ocamllex/STKCompiler.mll"
                (
    let tag = Lexing.lexeme lexbuf in
    fprintf output "%s:\n" tag;
    dater_points (next_lexeme pos) tag lexbuf
  )
# 411 "ocamllex/STKCompiler.ml"

  | 4 ->
# 123 "ocamllex/STKCompiler.mll"
                (
    error pos (fmt "Syntax error: found `%s` without a tag" (Lexing.lexeme lexbuf)) lexbuf
  )
# 418 "ocamllex/STKCompiler.ml"

  | 5 ->
# 126 "ocamllex/STKCompiler.mll"
                ( dater_tag (next_line pos) lexbuf )
# 423 "ocamllex/STKCompiler.ml"

  | 6 ->
# 127 "ocamllex/STKCompiler.mll"
                ()
# 428 "ocamllex/STKCompiler.ml"

  | 7 ->
# 128 "ocamllex/STKCompiler.mll"
                ( 
    error (next_lexeme pos) "Syntax error: only tag definitions are allowed after '.data'" lexbuf
  )
# 435 "ocamllex/STKCompiler.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_dater_tag_rec pos lexbuf __ocaml_lex_state

and dater_points pos previous lexbuf =
   __ocaml_lex_dater_points_rec pos previous lexbuf 12
and __ocaml_lex_dater_points_rec pos previous lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 134 "ocamllex/STKCompiler.mll"
                ( dater_points (next_lexeme pos) previous lexbuf )
# 447 "ocamllex/STKCompiler.ml"

  | 1 ->
# 135 "ocamllex/STKCompiler.mll"
                ( dater_points (next_lexeme pos) previous lexbuf )
# 452 "ocamllex/STKCompiler.ml"

  | 2 ->
# 136 "ocamllex/STKCompiler.mll"
                ( dater_data (next_lexeme pos) previous lexbuf )
# 457 "ocamllex/STKCompiler.ml"

  | 3 ->
# 137 "ocamllex/STKCompiler.mll"
                (
   error (next_lexeme pos) (fmt "Syntax error: tag '%s' was not given a value" previous) lexbuf
  )
# 464 "ocamllex/STKCompiler.ml"

  | 4 ->
# 140 "ocamllex/STKCompiler.mll"
                (
    error (next_lexeme pos) (fmt "Syntax error: found data '%s' directly after tag '%s'. You may have forgotten ':'." (Lexing.lexeme lexbuf) previous) lexbuf
  )
# 471 "ocamllex/STKCompiler.ml"

  | 5 ->
# 143 "ocamllex/STKCompiler.mll"
                ( dater_points (next_line pos) previous lexbuf )
# 476 "ocamllex/STKCompiler.ml"

  | 6 ->
# 144 "ocamllex/STKCompiler.mll"
                (
    raise (Compilation_Error(pos, fmt "Syntax error: tag '%s' was not given a value" previous))
  )
# 483 "ocamllex/STKCompiler.ml"

  | 7 ->
# 147 "ocamllex/STKCompiler.mll"
                ( 
    error (next_lexeme pos) (fmt "Syntax error while looking for ':' after declaration of tag '%s'" previous) lexbuf
  )
# 490 "ocamllex/STKCompiler.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_dater_points_rec pos previous lexbuf __ocaml_lex_state

and dater_data pos previous lexbuf =
   __ocaml_lex_dater_data_rec pos previous lexbuf 24
and __ocaml_lex_dater_data_rec pos previous lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 153 "ocamllex/STKCompiler.mll"
                ( dater_data (next_lexeme pos) previous lexbuf )
# 502 "ocamllex/STKCompiler.ml"

  | 1 ->
# 154 "ocamllex/STKCompiler.mll"
                ( dater_data (next_lexeme pos) previous lexbuf )
# 507 "ocamllex/STKCompiler.ml"

  | 2 ->
# 155 "ocamllex/STKCompiler.mll"
                ( 
    error (next_lexeme pos) "Syntax error: duplicate ':'" lexbuf
  )
# 514 "ocamllex/STKCompiler.ml"

  | 3 ->
# 158 "ocamllex/STKCompiler.mll"
                (
   error (next_lexeme pos) (fmt "Syntax error: found tag '%s', expected a value" (Lexing.lexeme lexbuf)) lexbuf
  )
# 521 "ocamllex/STKCompiler.ml"

  | 4 ->
# 161 "ocamllex/STKCompiler.mll"
                (
    fprintf output "%s\n" (Lexing.lexeme lexbuf);
    dater_tag (next_lexeme pos) lexbuf
  )
# 529 "ocamllex/STKCompiler.ml"

  | 5 ->
# 165 "ocamllex/STKCompiler.mll"
                ( dater_data (next_line pos) previous lexbuf )
# 534 "ocamllex/STKCompiler.ml"

  | 6 ->
# 166 "ocamllex/STKCompiler.mll"
                (
    raise (Compilation_Error(pos, fmt "Syntax error: tag '%s' was not given a value" previous))
  )
# 541 "ocamllex/STKCompiler.ml"

  | 7 ->
# 169 "ocamllex/STKCompiler.mll"
                ( 
    error (next_lexeme pos) (fmt "Syntax error while looking for the value of tag '%s'" previous) lexbuf
  )
# 548 "ocamllex/STKCompiler.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_dater_data_rec pos previous lexbuf __ocaml_lex_state

and texter pos lexbuf =
   __ocaml_lex_texter_rec pos lexbuf 36
and __ocaml_lex_texter_rec pos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 175 "ocamllex/STKCompiler.mll"
                ( dater_tag (next_lexeme pos) lexbuf )
# 560 "ocamllex/STKCompiler.ml"

  | 1 ->
# 178 "ocamllex/STKCompiler.mll"
                ( texter (next_lexeme pos) lexbuf )
# 565 "ocamllex/STKCompiler.ml"

  | 2 ->
# 179 "ocamllex/STKCompiler.mll"
                ( texter (next_lexeme pos) lexbuf )
# 570 "ocamllex/STKCompiler.ml"

  | 3 ->
# 180 "ocamllex/STKCompiler.mll"
                ( texter (next_line pos) lexbuf )
# 575 "ocamllex/STKCompiler.ml"

  | 4 ->
# 183 "ocamllex/STKCompiler.mll"
                ( 
    fprintf output "NOP\n";
    texter (next_lexeme pos) lexbuf
  )
# 583 "ocamllex/STKCompiler.ml"

  | 5 ->
# 187 "ocamllex/STKCompiler.mll"
                ( 
    fprintf output "EXIT\n";
    texter (next_lexeme pos) lexbuf
  )
# 591 "ocamllex/STKCompiler.ml"

  | 6 ->
# 193 "ocamllex/STKCompiler.mll"
                ( 
    pop [0];
    fprintf output "PRINT $r0\n";
    texter (next_lexeme pos) lexbuf
  )
# 600 "ocamllex/STKCompiler.ml"

  | 7 ->
# 200 "ocamllex/STKCompiler.mll"
                (
    pop_n 1;
    fprintf output "READ $r1 $r0\n";
    push (Reg 1);
    texter (next_lexeme pos) lexbuf
  )
# 610 "ocamllex/STKCompiler.ml"

  | 8 ->
# 207 "ocamllex/STKCompiler.mll"
                (
    fprintf output "# - THE write - begin ------------------------------------\n";
    pop_n 2;
    fprintf output "WRITE $r0 $r1\n";
    fprintf output "# - THE write - end --------------------------------------\n";
    texter (next_lexeme pos) lexbuf
  )
# 621 "ocamllex/STKCompiler.ml"

  | 9 ->
# 216 "ocamllex/STKCompiler.mll"
                (
    pop_n 1;
    fprintf output "JUMP $r0\n";
    texter (next_lexeme pos) lexbuf
  )
# 630 "ocamllex/STKCompiler.ml"

  | 10 ->
# 221 "ocamllex/STKCompiler.mll"
                (
    pop_n 2;
    fprintf output "JUMP $r0 WHEN $r1\n";
    texter (next_lexeme pos) lexbuf
  )
# 639 "ocamllex/STKCompiler.ml"

  | 11 ->
# 228 "ocamllex/STKCompiler.mll"
                (  
    pop_n 1;
    fprintf output "MINUS $r0\n";
    push (Reg 0);
    texter (next_lexeme pos) lexbuf
  )
# 649 "ocamllex/STKCompiler.ml"

  | 12 ->
# 234 "ocamllex/STKCompiler.mll"
                (
    pop_n 1;
    fprintf output "NEG $r0\n";
    push (Reg 0);
    texter (next_lexeme pos) lexbuf
  )
# 659 "ocamllex/STKCompiler.ml"

  | 13 ->
# 245 "ocamllex/STKCompiler.mll"
                (
    pop_n 2;
    fprintf output "%s $r0 $r0 $r1\n" (Lexing.lexeme lexbuf);
    push (Reg 0);
    texter (next_lexeme pos) lexbuf
  )
# 669 "ocamllex/STKCompiler.ml"

  | 14 ->
# 253 "ocamllex/STKCompiler.mll"
                     ( 
    fprintf output "%s\n" (Lexing.lexeme lexbuf);
    texter (next_lexeme pos) lexbuf 
  )
# 677 "ocamllex/STKCompiler.ml"

  | 15 ->
# 257 "ocamllex/STKCompiler.mll"
                (
    push (Tag (Lexing.lexeme lexbuf));
    texter (next_lexeme pos) lexbuf
  )
# 685 "ocamllex/STKCompiler.ml"

  | 16 ->
# 261 "ocamllex/STKCompiler.mll"
                ( 
    push (Int (Lexing.lexeme lexbuf));
    texter (next_lexeme pos) lexbuf 
  )
# 693 "ocamllex/STKCompiler.ml"

  | 17 ->
# 266 "ocamllex/STKCompiler.mll"
                (
    (* Ce n'est pas forcément une erreur de compilation *)
  )
# 700 "ocamllex/STKCompiler.ml"

  | 18 ->
# 270 "ocamllex/STKCompiler.mll"
                ( 
    error (next_lexeme pos) "Syntax error" lexbuf
  )
# 707 "ocamllex/STKCompiler.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_texter_rec pos lexbuf __ocaml_lex_state

and lexer pos lexbuf =
   __ocaml_lex_lexer_rec pos lexbuf 103
and __ocaml_lex_lexer_rec pos lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 276 "ocamllex/STKCompiler.mll"
              ( texter (next_lexeme pos) lexbuf )
# 719 "ocamllex/STKCompiler.ml"

  | 1 ->
# 277 "ocamllex/STKCompiler.mll"
              ( lexer (next_lexeme pos) lexbuf )
# 724 "ocamllex/STKCompiler.ml"

  | 2 ->
# 278 "ocamllex/STKCompiler.mll"
              ( lexer (next_lexeme pos) lexbuf )
# 729 "ocamllex/STKCompiler.ml"

  | 3 ->
# 279 "ocamllex/STKCompiler.mll"
              ( lexer (next_line pos) lexbuf )
# 734 "ocamllex/STKCompiler.ml"

  | 4 ->
# 280 "ocamllex/STKCompiler.mll"
              (
    raise (Compilation_Error (pos, "Reached unexpected end of file"))
  )
# 741 "ocamllex/STKCompiler.ml"

  | 5 ->
# 283 "ocamllex/STKCompiler.mll"
              ( 
    error (next_lexeme pos) (fmt "Syntax error while looking for '.text'") lexbuf
  )
# 748 "ocamllex/STKCompiler.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_lexer_rec pos lexbuf __ocaml_lex_state

and error pos msg lexbuf =
   __ocaml_lex_error_rec pos msg lexbuf 116
and __ocaml_lex_error_rec pos msg lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 290 "ocamllex/STKCompiler.mll"
              ( raise (Compilation_Error(pos, msg)) )
# 760 "ocamllex/STKCompiler.ml"

  | 1 ->
# 291 "ocamllex/STKCompiler.mll"
              ( 
    error (next_lexeme pos) msg lexbuf
  )
# 767 "ocamllex/STKCompiler.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_error_rec pos msg lexbuf __ocaml_lex_state

;;

# 296 "ocamllex/STKCompiler.mll"
 
  let _ =
    let beginning = Sys.time () in
    printf "Compiling %s...\n" src; 
    fprintf output "ADDRESS %s stack_pointer\n" spa;
    fprintf output "READ %s %s\n" sp spa;
    try
      lexer first_position lexbuf;
      (* si succès -> *)
      fprintf output "stack_pointer:\n65536";
      close_out output;
      printf "Compilation STK -> ASM successful (%fs)\n" (Sys.time () -. beginning)
    with
    | Compilation_Error (pos, msg) ->
      printf "[ERROR] Line %d:\n%s\n%s\n" pos.lnum pos.line msg
    | Failure msg ->
      printf "[ERROR] The compilation failed. Error : %s\n" msg

# 793 "ocamllex/STKCompiler.ml"

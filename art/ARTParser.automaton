State 0:
source' -> . source [ # ]
-- On error shift to state 1
-- On TEXT shift to state 2
-- On source shift to state 70

State 1:
source -> error . [ # ]
-- On # reduce production source -> error 

State 2:
source -> TEXT . instructions EOF [ # ]
source -> TEXT . instructions DATA data_declarations EOF [ # ]
-- On PRINT shift to state 3
-- On NOP shift to state 44
-- On LEFT_EXPR_STAR shift to state 7
-- On JUMP shift to state 45
-- On ID shift to state 49
-- On EXIT shift to state 50
-- On tag shift to state 51
-- On l_express shift to state 53
-- On instructions shift to state 60
-- On instruction shift to state 57
-- On EOF reduce production instructions -> 
-- On DATA reduce production instructions -> 

State 3:
instruction -> PRINT . LP expression RP [ SEMI ]
-- On LP shift to state 4

State 4:
instruction -> PRINT LP . expression RP [ SEMI ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 42

State 5:
expression -> UNOP . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 41

State 6:
expression -> LP . expression RP [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 13

State 7:
l_express -> LEFT_EXPR_STAR . l_express [ WHEN SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND AFFECT ADD ]
-- On LEFT_EXPR_STAR shift to state 7
-- On ID shift to state 8
-- On l_express shift to state 9

State 8:
l_express -> ID . [ WHEN SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND AFFECT ADD ]
-- On WHEN reduce production l_express -> ID 
-- On SUP_EQUAL reduce production l_express -> ID 
-- On SUP reduce production l_express -> ID 
-- On SUB reduce production l_express -> ID 
-- On SEMI reduce production l_express -> ID 
-- On RP reduce production l_express -> ID 
-- On OR reduce production l_express -> ID 
-- On NOT_EQUAL reduce production l_express -> ID 
-- On MUL reduce production l_express -> ID 
-- On MOD reduce production l_express -> ID 
-- On INF_EQUAL reduce production l_express -> ID 
-- On INF reduce production l_express -> ID 
-- On EQUAL reduce production l_express -> ID 
-- On DIV reduce production l_express -> ID 
-- On AND reduce production l_express -> ID 
-- On AFFECT reduce production l_express -> ID 
-- On ADD reduce production l_express -> ID 

State 9:
l_express -> LEFT_EXPR_STAR l_express . [ WHEN SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND AFFECT ADD ]
-- On WHEN reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On SUP_EQUAL reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On SUP reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On SUB reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On SEMI reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On RP reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On OR reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On NOT_EQUAL reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On MUL reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On MOD reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On INF_EQUAL reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On INF reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On EQUAL reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On DIV reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On AND reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On AFFECT reduce production l_express -> LEFT_EXPR_STAR l_express 
-- On ADD reduce production l_express -> LEFT_EXPR_STAR l_express 

State 10:
expression -> INT . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> INT 
-- On SUP reduce production expression -> INT 
-- On SUB reduce production expression -> INT 
-- On SEMI reduce production expression -> INT 
-- On RP reduce production expression -> INT 
-- On OR reduce production expression -> INT 
-- On NOT_EQUAL reduce production expression -> INT 
-- On MUL reduce production expression -> INT 
-- On MOD reduce production expression -> INT 
-- On INF_EQUAL reduce production expression -> INT 
-- On INF reduce production expression -> INT 
-- On EQUAL reduce production expression -> INT 
-- On DIV reduce production expression -> INT 
-- On AND reduce production expression -> INT 
-- On ADD reduce production expression -> INT 

State 11:
expression -> BOOL . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> BOOL 
-- On SUP reduce production expression -> BOOL 
-- On SUB reduce production expression -> BOOL 
-- On SEMI reduce production expression -> BOOL 
-- On RP reduce production expression -> BOOL 
-- On OR reduce production expression -> BOOL 
-- On NOT_EQUAL reduce production expression -> BOOL 
-- On MUL reduce production expression -> BOOL 
-- On MOD reduce production expression -> BOOL 
-- On INF_EQUAL reduce production expression -> BOOL 
-- On INF reduce production expression -> BOOL 
-- On EQUAL reduce production expression -> BOOL 
-- On DIV reduce production expression -> BOOL 
-- On AND reduce production expression -> BOOL 
-- On ADD reduce production expression -> BOOL 

State 12:
expression -> l_express . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> l_express 
-- On SUP reduce production expression -> l_express 
-- On SUB reduce production expression -> l_express 
-- On SEMI reduce production expression -> l_express 
-- On RP reduce production expression -> l_express 
-- On OR reduce production expression -> l_express 
-- On NOT_EQUAL reduce production expression -> l_express 
-- On MUL reduce production expression -> l_express 
-- On MOD reduce production expression -> l_express 
-- On INF_EQUAL reduce production expression -> l_express 
-- On INF reduce production expression -> l_express 
-- On EQUAL reduce production expression -> l_express 
-- On DIV reduce production expression -> l_express 
-- On AND reduce production expression -> l_express 
-- On ADD reduce production expression -> l_express 

State 13:
expression -> LP expression . RP [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL shift to state 14
-- On SUP shift to state 26
-- On SUB shift to state 16
-- On RP shift to state 28
-- On OR shift to state 29
-- On NOT_EQUAL shift to state 31
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On INF_EQUAL shift to state 33
-- On INF shift to state 35
-- On EQUAL shift to state 37
-- On DIV shift to state 22
-- On AND shift to state 39
-- On ADD shift to state 24

State 14:
expression -> expression SUP_EQUAL . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 15

State 15:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression SUP_EQUAL expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUB shift to state 16
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SUP_EQUAL reduce production expression -> expression SUP_EQUAL expression 
-- On SUP reduce production expression -> expression SUP_EQUAL expression 
-- On SEMI reduce production expression -> expression SUP_EQUAL expression 
-- On RP reduce production expression -> expression SUP_EQUAL expression 
-- On OR reduce production expression -> expression SUP_EQUAL expression 
-- On NOT_EQUAL reduce production expression -> expression SUP_EQUAL expression 
-- On INF_EQUAL reduce production expression -> expression SUP_EQUAL expression 
-- On INF reduce production expression -> expression SUP_EQUAL expression 
-- On EQUAL reduce production expression -> expression SUP_EQUAL expression 
-- On AND reduce production expression -> expression SUP_EQUAL expression 

State 16:
expression -> expression SUB . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 17

State 17:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression SUB expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On SUP_EQUAL reduce production expression -> expression SUB expression 
-- On SUP reduce production expression -> expression SUB expression 
-- On SUB reduce production expression -> expression SUB expression 
-- On SEMI reduce production expression -> expression SUB expression 
-- On RP reduce production expression -> expression SUB expression 
-- On OR reduce production expression -> expression SUB expression 
-- On NOT_EQUAL reduce production expression -> expression SUB expression 
-- On INF_EQUAL reduce production expression -> expression SUB expression 
-- On INF reduce production expression -> expression SUB expression 
-- On EQUAL reduce production expression -> expression SUB expression 
-- On AND reduce production expression -> expression SUB expression 
-- On ADD reduce production expression -> expression SUB expression 

State 18:
expression -> expression MUL . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 19

State 19:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression MUL expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> expression MUL expression 
-- On SUP reduce production expression -> expression MUL expression 
-- On SUB reduce production expression -> expression MUL expression 
-- On SEMI reduce production expression -> expression MUL expression 
-- On RP reduce production expression -> expression MUL expression 
-- On OR reduce production expression -> expression MUL expression 
-- On NOT_EQUAL reduce production expression -> expression MUL expression 
-- On MUL reduce production expression -> expression MUL expression 
-- On MOD reduce production expression -> expression MUL expression 
-- On INF_EQUAL reduce production expression -> expression MUL expression 
-- On INF reduce production expression -> expression MUL expression 
-- On EQUAL reduce production expression -> expression MUL expression 
-- On DIV reduce production expression -> expression MUL expression 
-- On AND reduce production expression -> expression MUL expression 
-- On ADD reduce production expression -> expression MUL expression 

State 20:
expression -> expression MOD . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 21

State 21:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression MOD expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> expression MOD expression 
-- On SUP reduce production expression -> expression MOD expression 
-- On SUB reduce production expression -> expression MOD expression 
-- On SEMI reduce production expression -> expression MOD expression 
-- On RP reduce production expression -> expression MOD expression 
-- On OR reduce production expression -> expression MOD expression 
-- On NOT_EQUAL reduce production expression -> expression MOD expression 
-- On MUL reduce production expression -> expression MOD expression 
-- On MOD reduce production expression -> expression MOD expression 
-- On INF_EQUAL reduce production expression -> expression MOD expression 
-- On INF reduce production expression -> expression MOD expression 
-- On EQUAL reduce production expression -> expression MOD expression 
-- On DIV reduce production expression -> expression MOD expression 
-- On AND reduce production expression -> expression MOD expression 
-- On ADD reduce production expression -> expression MOD expression 

State 22:
expression -> expression DIV . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 23

State 23:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression DIV expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> expression DIV expression 
-- On SUP reduce production expression -> expression DIV expression 
-- On SUB reduce production expression -> expression DIV expression 
-- On SEMI reduce production expression -> expression DIV expression 
-- On RP reduce production expression -> expression DIV expression 
-- On OR reduce production expression -> expression DIV expression 
-- On NOT_EQUAL reduce production expression -> expression DIV expression 
-- On MUL reduce production expression -> expression DIV expression 
-- On MOD reduce production expression -> expression DIV expression 
-- On INF_EQUAL reduce production expression -> expression DIV expression 
-- On INF reduce production expression -> expression DIV expression 
-- On EQUAL reduce production expression -> expression DIV expression 
-- On DIV reduce production expression -> expression DIV expression 
-- On AND reduce production expression -> expression DIV expression 
-- On ADD reduce production expression -> expression DIV expression 

State 24:
expression -> expression ADD . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 25

State 25:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression ADD expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On SUP_EQUAL reduce production expression -> expression ADD expression 
-- On SUP reduce production expression -> expression ADD expression 
-- On SUB reduce production expression -> expression ADD expression 
-- On SEMI reduce production expression -> expression ADD expression 
-- On RP reduce production expression -> expression ADD expression 
-- On OR reduce production expression -> expression ADD expression 
-- On NOT_EQUAL reduce production expression -> expression ADD expression 
-- On INF_EQUAL reduce production expression -> expression ADD expression 
-- On INF reduce production expression -> expression ADD expression 
-- On EQUAL reduce production expression -> expression ADD expression 
-- On AND reduce production expression -> expression ADD expression 
-- On ADD reduce production expression -> expression ADD expression 

State 26:
expression -> expression SUP . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 27

State 27:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression SUP expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUB shift to state 16
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SUP_EQUAL reduce production expression -> expression SUP expression 
-- On SUP reduce production expression -> expression SUP expression 
-- On SEMI reduce production expression -> expression SUP expression 
-- On RP reduce production expression -> expression SUP expression 
-- On OR reduce production expression -> expression SUP expression 
-- On NOT_EQUAL reduce production expression -> expression SUP expression 
-- On INF_EQUAL reduce production expression -> expression SUP expression 
-- On INF reduce production expression -> expression SUP expression 
-- On EQUAL reduce production expression -> expression SUP expression 
-- On AND reduce production expression -> expression SUP expression 

State 28:
expression -> LP expression RP . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> LP expression RP 
-- On SUP reduce production expression -> LP expression RP 
-- On SUB reduce production expression -> LP expression RP 
-- On SEMI reduce production expression -> LP expression RP 
-- On RP reduce production expression -> LP expression RP 
-- On OR reduce production expression -> LP expression RP 
-- On NOT_EQUAL reduce production expression -> LP expression RP 
-- On MUL reduce production expression -> LP expression RP 
-- On MOD reduce production expression -> LP expression RP 
-- On INF_EQUAL reduce production expression -> LP expression RP 
-- On INF reduce production expression -> LP expression RP 
-- On EQUAL reduce production expression -> LP expression RP 
-- On DIV reduce production expression -> LP expression RP 
-- On AND reduce production expression -> LP expression RP 
-- On ADD reduce production expression -> LP expression RP 

State 29:
expression -> expression OR . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 30

State 30:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression OR expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL shift to state 14
-- On SUP shift to state 26
-- On SUB shift to state 16
-- On NOT_EQUAL shift to state 31
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On INF_EQUAL shift to state 33
-- On INF shift to state 35
-- On EQUAL shift to state 37
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SEMI reduce production expression -> expression OR expression 
-- On RP reduce production expression -> expression OR expression 
-- On OR reduce production expression -> expression OR expression 
-- On AND reduce production expression -> expression OR expression 

State 31:
expression -> expression NOT_EQUAL . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 32

State 32:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression NOT_EQUAL expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUB shift to state 16
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SUP_EQUAL reduce production expression -> expression NOT_EQUAL expression 
-- On SUP reduce production expression -> expression NOT_EQUAL expression 
-- On SEMI reduce production expression -> expression NOT_EQUAL expression 
-- On RP reduce production expression -> expression NOT_EQUAL expression 
-- On OR reduce production expression -> expression NOT_EQUAL expression 
-- On NOT_EQUAL reduce production expression -> expression NOT_EQUAL expression 
-- On INF_EQUAL reduce production expression -> expression NOT_EQUAL expression 
-- On INF reduce production expression -> expression NOT_EQUAL expression 
-- On EQUAL reduce production expression -> expression NOT_EQUAL expression 
-- On AND reduce production expression -> expression NOT_EQUAL expression 

State 33:
expression -> expression INF_EQUAL . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 34

State 34:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression INF_EQUAL expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUB shift to state 16
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SUP_EQUAL reduce production expression -> expression INF_EQUAL expression 
-- On SUP reduce production expression -> expression INF_EQUAL expression 
-- On SEMI reduce production expression -> expression INF_EQUAL expression 
-- On RP reduce production expression -> expression INF_EQUAL expression 
-- On OR reduce production expression -> expression INF_EQUAL expression 
-- On NOT_EQUAL reduce production expression -> expression INF_EQUAL expression 
-- On INF_EQUAL reduce production expression -> expression INF_EQUAL expression 
-- On INF reduce production expression -> expression INF_EQUAL expression 
-- On EQUAL reduce production expression -> expression INF_EQUAL expression 
-- On AND reduce production expression -> expression INF_EQUAL expression 

State 35:
expression -> expression INF . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 36

State 36:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression INF expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUB shift to state 16
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SUP_EQUAL reduce production expression -> expression INF expression 
-- On SUP reduce production expression -> expression INF expression 
-- On SEMI reduce production expression -> expression INF expression 
-- On RP reduce production expression -> expression INF expression 
-- On OR reduce production expression -> expression INF expression 
-- On NOT_EQUAL reduce production expression -> expression INF expression 
-- On INF_EQUAL reduce production expression -> expression INF expression 
-- On INF reduce production expression -> expression INF expression 
-- On EQUAL reduce production expression -> expression INF expression 
-- On AND reduce production expression -> expression INF expression 

State 37:
expression -> expression EQUAL . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 38

State 38:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression EQUAL expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUB shift to state 16
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SUP_EQUAL reduce production expression -> expression EQUAL expression 
-- On SUP reduce production expression -> expression EQUAL expression 
-- On SEMI reduce production expression -> expression EQUAL expression 
-- On RP reduce production expression -> expression EQUAL expression 
-- On OR reduce production expression -> expression EQUAL expression 
-- On NOT_EQUAL reduce production expression -> expression EQUAL expression 
-- On INF_EQUAL reduce production expression -> expression EQUAL expression 
-- On INF reduce production expression -> expression EQUAL expression 
-- On EQUAL reduce production expression -> expression EQUAL expression 
-- On AND reduce production expression -> expression EQUAL expression 

State 39:
expression -> expression AND . expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 40

State 40:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression AND expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL shift to state 14
-- On SUP shift to state 26
-- On SUB shift to state 16
-- On NOT_EQUAL shift to state 31
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On INF_EQUAL shift to state 33
-- On INF shift to state 35
-- On EQUAL shift to state 37
-- On DIV shift to state 22
-- On ADD shift to state 24
-- On SEMI reduce production expression -> expression AND expression 
-- On RP reduce production expression -> expression AND expression 
-- On OR reduce production expression -> expression AND expression 
-- On AND reduce production expression -> expression AND expression 

State 41:
expression -> UNOP expression . [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
-- On SUP_EQUAL reduce production expression -> UNOP expression 
-- On SUP reduce production expression -> UNOP expression 
-- On SUB reduce production expression -> UNOP expression 
-- On SEMI reduce production expression -> UNOP expression 
-- On RP reduce production expression -> UNOP expression 
-- On OR reduce production expression -> UNOP expression 
-- On NOT_EQUAL reduce production expression -> UNOP expression 
-- On MUL reduce production expression -> UNOP expression 
-- On MOD reduce production expression -> UNOP expression 
-- On INF_EQUAL reduce production expression -> UNOP expression 
-- On INF reduce production expression -> UNOP expression 
-- On EQUAL reduce production expression -> UNOP expression 
-- On DIV reduce production expression -> UNOP expression 
-- On AND reduce production expression -> UNOP expression 
-- On ADD reduce production expression -> UNOP expression 

State 42:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB RP OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
instruction -> PRINT LP expression . RP [ SEMI ]
-- On SUP_EQUAL shift to state 14
-- On SUP shift to state 26
-- On SUB shift to state 16
-- On RP shift to state 43
-- On OR shift to state 29
-- On NOT_EQUAL shift to state 31
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On INF_EQUAL shift to state 33
-- On INF shift to state 35
-- On EQUAL shift to state 37
-- On DIV shift to state 22
-- On AND shift to state 39
-- On ADD shift to state 24

State 43:
instruction -> PRINT LP expression RP . [ SEMI ]
-- On SEMI reduce production instruction -> PRINT LP expression RP 

State 44:
instruction -> NOP . [ SEMI ]
-- On SEMI reduce production instruction -> NOP 

State 45:
instruction -> JUMP . l_express [ SEMI ]
instruction -> JUMP . l_express WHEN expression [ SEMI ]
-- On LEFT_EXPR_STAR shift to state 7
-- On ID shift to state 8
-- On l_express shift to state 46

State 46:
instruction -> JUMP l_express . [ SEMI ]
instruction -> JUMP l_express . WHEN expression [ SEMI ]
-- On WHEN shift to state 47
-- On SEMI reduce production instruction -> JUMP l_express 

State 47:
instruction -> JUMP l_express WHEN . expression [ SEMI ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 48

State 48:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
instruction -> JUMP l_express WHEN expression . [ SEMI ]
-- On SUP_EQUAL shift to state 14
-- On SUP shift to state 26
-- On SUB shift to state 16
-- On OR shift to state 29
-- On NOT_EQUAL shift to state 31
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On INF_EQUAL shift to state 33
-- On INF shift to state 35
-- On EQUAL shift to state 37
-- On DIV shift to state 22
-- On AND shift to state 39
-- On ADD shift to state 24
-- On SEMI reduce production instruction -> JUMP l_express WHEN expression 

State 49:
l_express -> ID . [ AFFECT ]
tag -> ID . [ TWO_POINT ]
-- On TWO_POINT reduce production tag -> ID 
-- On AFFECT reduce production l_express -> ID 

State 50:
instruction -> EXIT . [ SEMI ]
-- On SEMI reduce production instruction -> EXIT 

State 51:
instructions -> tag . TWO_POINT instructions [ EOF DATA ]
-- On TWO_POINT shift to state 52

State 52:
instructions -> tag TWO_POINT . instructions [ EOF DATA ]
-- On PRINT shift to state 3
-- On NOP shift to state 44
-- On LEFT_EXPR_STAR shift to state 7
-- On JUMP shift to state 45
-- On ID shift to state 49
-- On EXIT shift to state 50
-- On tag shift to state 51
-- On l_express shift to state 53
-- On instructions shift to state 56
-- On instruction shift to state 57
-- On EOF reduce production instructions -> 
-- On DATA reduce production instructions -> 

State 53:
instruction -> l_express . AFFECT expression [ SEMI ]
-- On AFFECT shift to state 54

State 54:
instruction -> l_express AFFECT . expression [ SEMI ]
-- On UNOP shift to state 5
-- On LP shift to state 6
-- On LEFT_EXPR_STAR shift to state 7
-- On INT shift to state 10
-- On ID shift to state 8
-- On BOOL shift to state 11
-- On l_express shift to state 12
-- On expression shift to state 55

State 55:
expression -> expression . ADD expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUB expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . DIV expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MUL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . INF_EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . SUP_EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . MOD expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . NOT_EQUAL expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . AND expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
expression -> expression . OR expression [ SUP_EQUAL SUP SUB SEMI OR NOT_EQUAL MUL MOD INF_EQUAL INF EQUAL DIV AND ADD ]
instruction -> l_express AFFECT expression . [ SEMI ]
-- On SUP_EQUAL shift to state 14
-- On SUP shift to state 26
-- On SUB shift to state 16
-- On OR shift to state 29
-- On NOT_EQUAL shift to state 31
-- On MUL shift to state 18
-- On MOD shift to state 20
-- On INF_EQUAL shift to state 33
-- On INF shift to state 35
-- On EQUAL shift to state 37
-- On DIV shift to state 22
-- On AND shift to state 39
-- On ADD shift to state 24
-- On SEMI reduce production instruction -> l_express AFFECT expression 

State 56:
instructions -> tag TWO_POINT instructions . [ EOF DATA ]
-- On EOF reduce production instructions -> tag TWO_POINT instructions 
-- On DATA reduce production instructions -> tag TWO_POINT instructions 

State 57:
instructions -> instruction . SEMI instructions [ EOF DATA ]
-- On SEMI shift to state 58

State 58:
instructions -> instruction SEMI . instructions [ EOF DATA ]
-- On PRINT shift to state 3
-- On NOP shift to state 44
-- On LEFT_EXPR_STAR shift to state 7
-- On JUMP shift to state 45
-- On ID shift to state 49
-- On EXIT shift to state 50
-- On tag shift to state 51
-- On l_express shift to state 53
-- On instructions shift to state 59
-- On instruction shift to state 57
-- On EOF reduce production instructions -> 
-- On DATA reduce production instructions -> 

State 59:
instructions -> instruction SEMI instructions . [ EOF DATA ]
-- On EOF reduce production instructions -> instruction SEMI instructions 
-- On DATA reduce production instructions -> instruction SEMI instructions 

State 60:
source -> TEXT instructions . EOF [ # ]
source -> TEXT instructions . DATA data_declarations EOF [ # ]
-- On EOF shift to state 61
-- On DATA shift to state 62

State 61:
source -> TEXT instructions EOF . [ # ]
-- On # reduce production source -> TEXT instructions EOF 

State 62:
source -> TEXT instructions DATA . data_declarations EOF [ # ]
-- On ID shift to state 63
-- On data_declarations shift to state 66
-- On data_declaration shift to state 68
-- On EOF reduce production data_declarations -> 

State 63:
data_declaration -> ID . TWO_POINT INT [ ID EOF ]
-- On TWO_POINT shift to state 64

State 64:
data_declaration -> ID TWO_POINT . INT [ ID EOF ]
-- On INT shift to state 65

State 65:
data_declaration -> ID TWO_POINT INT . [ ID EOF ]
-- On ID reduce production data_declaration -> ID TWO_POINT INT 
-- On EOF reduce production data_declaration -> ID TWO_POINT INT 

State 66:
source -> TEXT instructions DATA data_declarations . EOF [ # ]
-- On EOF shift to state 67

State 67:
source -> TEXT instructions DATA data_declarations EOF . [ # ]
-- On # reduce production source -> TEXT instructions DATA data_declarations EOF 

State 68:
data_declarations -> data_declaration . data_declarations [ EOF ]
-- On ID shift to state 63
-- On data_declarations shift to state 69
-- On data_declaration shift to state 68
-- On EOF reduce production data_declarations -> 

State 69:
data_declarations -> data_declaration data_declarations . [ EOF ]
-- On EOF reduce production data_declarations -> data_declaration data_declarations 

State 70:
source' -> source . [ # ]
-- On # accept source

